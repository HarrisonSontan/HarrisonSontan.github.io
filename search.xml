<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>用Hexo框架写的第一个博客，记录一下</title>
    <url>/2024/07/17/hello-world/</url>
    <content><![CDATA[<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="创建一个新的Post"><a href="#创建一个新的Post" class="headerlink" title="创建一个新的Post"></a>创建一个新的Post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<h3 id="生成项目"><a href="#生成项目" class="headerlink" title="生成项目"></a>生成项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="上传代码到Github托管"><a href="#上传代码到Github托管" class="headerlink" title="上传代码到Github托管"></a>上传代码到Github托管</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="效果真不错"><a href="#效果真不错" class="headerlink" title="效果真不错"></a>效果真不错</h2><p><img src="https://wa.xcning.top/img/banner.9a8be5e1.png" alt="alt text"></p>
]]></content>
      <categories>
        <category>Hexo</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>学习 express 框架 上</title>
    <url>/2024/07/26/nodejs%E7%9A%84express%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%8A/</url>
    <content><![CDATA[<h1 id="学习-express-框架-上"><a href="#学习-express-框架-上" class="headerlink" title="学习 express 框架 上"></a>学习 express 框架 上</h1><h2 id="1-了解-Express"><a href="#1-了解-Express" class="headerlink" title="1 了解 Express"></a>1 了解 Express</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><ul>
<li><h4 id="官方概念：Express-是基于-Node-js-平台-快速、开放、极简的-Web-开发框架。"><a href="#官方概念：Express-是基于-Node-js-平台-快速、开放、极简的-Web-开发框架。" class="headerlink" title="官方概念：Express 是基于 Node.js 平台,快速、开放、极简的 Web 开发框架。"></a>官方概念：Express 是基于 Node.js 平台,快速、开放、极简的 Web 开发框架。</h4></li>
<li><h4 id="通俗一点：Express-的作用和-Node-js-内置的-http-模块类似，专门用来创建-Web-服务器的。"><a href="#通俗一点：Express-的作用和-Node-js-内置的-http-模块类似，专门用来创建-Web-服务器的。" class="headerlink" title="通俗一点：Express 的作用和 Node.js 内置的 http 模块类似，专门用来创建 Web 服务器的。"></a>通俗一点：Express 的作用和 Node.js 内置的 http 模块类似，专门用来创建 Web 服务器的。</h4></li>
<li><h4 id="本质：npm-上的第三方包，快速创建-Web-服务器的便捷方法。"><a href="#本质：npm-上的第三方包，快速创建-Web-服务器的便捷方法。" class="headerlink" title="本质：npm 上的第三方包，快速创建 Web 服务器的便捷方法。"></a>本质：npm 上的第三方包，快速创建 Web 服务器的便捷方法。</h4></li>
</ul>
<h3 id="1-2-进一步理解"><a href="#1-2-进一步理解" class="headerlink" title="1.2 进一步理解"></a>1.2 进一步理解</h3><ol>
<li>没有Express也可以创建Web服务器，用原生http。</li>
<li>原生http复杂，效率低下，Express是对于http进一步封装出来的，开发效率高。</li>
</ol>
<h3 id="1-3-两种服务器"><a href="#1-3-两种服务器" class="headerlink" title="1.3 两种服务器"></a>1.3 两种服务器</h3><ol>
<li><strong>Web 网站服务器</strong>：专门对外提供 Web 网站资源的服务器</li>
<li><strong>API 接口服务器</strong>：专门对外提供API接口的服务器</li>
</ol>
<h2 id="2-Express的基本使用"><a href="#2-Express的基本使用" class="headerlink" title="2 Express的基本使用"></a>2 Express的基本使用</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>在项目所在终端运行如下命令：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i express@<span class="number">4.17</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-创建基本的Web服务器"><a href="#2-2-创建基本的Web服务器" class="headerlink" title="2.2 创建基本的Web服务器"></a>2.2 创建基本的Web服务器</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 2.创建 web 服务器</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="comment">// 3.调用 app.listen(端口号)</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-3-监听-GET-请求"><a href="#2-3-监听-GET-请求" class="headerlink" title="2.3 监听 GET 请求"></a>2.3 监听 GET 请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数1：客户端请求的 URL 地址</span></span><br><span class="line"><span class="comment">// 参数2：请求对应的处理函数</span></span><br><span class="line"><span class="comment">//        req：请求对象（包含了与请求相关的属性与方法）</span></span><br><span class="line"><span class="comment">//        res：相应对象（包含了与相应相关的属性与方法）</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求URL&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="comment">// 处理函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-4-监听-POST-请求"><a href="#2-4-监听-POST-请求" class="headerlink" title="2.4 监听 POST 请求"></a>2.4 监听 POST 请求</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数1：客户端请求的 URL 地址</span></span><br><span class="line"><span class="comment">// 参数2：请求对应的处理函数</span></span><br><span class="line"><span class="comment">//        req：请求对象（包含了与请求相关的属性与方法）</span></span><br><span class="line"><span class="comment">//        res：相应对象（包含了与相应相关的属性与方法）</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;请求URL&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="comment">// 处理函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-5-把内容相应给客户端"><a href="#2-5-把内容相应给客户端" class="headerlink" title="2.5 把内容相应给客户端"></a>2.5 把内容相应给客户端</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 向客户端发送 JSON 对象</span></span><br><span class="line">    res.<span class="title function_">send</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-6-获取URL中携带的查询参数"><a href="#2-6-获取URL中携带的查询参数" class="headerlink" title="2.6 获取URL中携带的查询参数"></a>2.6 获取URL中携带的查询参数</h3><p>通过req.query对象可以获取到客户端通过查询字符串的形式，发送到服务器的参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// req.query 默认是一个空对象</span></span><br><span class="line">    <span class="comment">// 客户端使用 ?name=zs&amp;age=20 这种查询字符串的形式，发送给服务器的参数</span></span><br><span class="line">    <span class="comment">// 可以通过 req.query 对象访问到。例如：</span></span><br><span class="line">    <span class="comment">// req.query.name   req.query.age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="2-7-获取-URL-中的动态参数"><a href="#2-7-获取-URL-中的动态参数" class="headerlink" title="2.7 获取 URL 中的动态参数"></a>2.7 获取 URL 中的动态参数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// URL 地址中，可以通过 :参数名 的形式，匹配动态参数值</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// req.params 默认是一个空对象</span></span><br><span class="line">    <span class="comment">// 里面存放着通过 ：动态匹配到的参数值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配两个</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user/:id/:name&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// req.params 默认是一个空对象</span></span><br><span class="line">    <span class="comment">// 里面存放着通过 ：动态匹配到的参数值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">params</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p><img src="/./img/nodejs%E7%9A%84express%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image.png" alt="alt text"></p>
<h2 id="3-托管静态资源"><a href="#3-托管静态资源" class="headerlink" title="3 托管静态资源"></a>3 托管静态资源</h2><h3 id="3-1-调用-express-static-方法，快速的对外提供静态资源"><a href="#3-1-调用-express-static-方法，快速的对外提供静态资源" class="headerlink" title="3.1 调用 express.static() 方法，快速的对外提供静态资源"></a>3.1 调用 express.static() 方法，快速的对外提供静态资源</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./clock&#x27;</span>))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="3-2-托管多个静态资源目录"><a href="#3-2-托管多个静态资源目录" class="headerlink" title="3.2 托管多个静态资源目录"></a>3.2 托管多个静态资源目录</h3><p>多次调用express.static()函数:<br>按顺序托管，只能查看到第一个托管到的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./files&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h3 id="3-3-挂载路径前缀"><a href="#3-3-挂载路径前缀" class="headerlink" title="3.3 挂载路径前缀"></a>3.3 挂载路径前缀</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/abc&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;./files&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="3-4-nodemon-更新代码自动帮我们重启项目"><a href="#3-4-nodemon-更新代码自动帮我们重启项目" class="headerlink" title="3.4 nodemon 更新代码自动帮我们重启项目"></a>3.4 nodemon 更新代码自动帮我们重启项目</h3><p>全局安装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure>
<p>使用 nodemon </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">nodemon app.<span class="property">js</span></span><br></pre></td></tr></table></figure>

<h2 id="4-Express-路由"><a href="#4-Express-路由" class="headerlink" title="4 Express 路由"></a>4 Express 路由</h2><p>在Express中，路由指的是客户端的请求与服务器处理函数之间的映射关系。<br>Express中的路由分 3 部分组成，分别是请求的类型、请求的URL地址、处理函数，格式如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">METHOD</span>(<span class="variable constant_">PATH</span>,<span class="variable constant_">HANDLER</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-1-Express-中的路由的例子"><a href="#4-1-Express-中的路由的例子" class="headerlink" title="4.1 Express 中的路由的例子"></a>4.1 Express 中的路由的例子</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匹配 GET 请求，且请求 URL 为 /</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;hello world!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配 POST 请求，且请求 URL 为 /</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Got a POST request&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4-2-路由的匹配过程"><a href="#4-2-路由的匹配过程" class="headerlink" title="4.2 路由的匹配过程"></a>4.2 路由的匹配过程</h3><p>每当一个请求到达服务器之后，需要先经过路由的匹配，只有匹配成功之后，才能调用对应的处理函数<br>在匹配时，会按照路由的顺序进行匹配，如果请求类型和请求的 URL 同时匹配成功，则 Express 会将这次请求，转交给对应的 function 函数进行处理。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="comment">// 创建 Web 服务器，命名为 app</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂载路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Post Request.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 Web 服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4-3-模块化路由"><a href="#4-3-模块化路由" class="headerlink" title="4.3 模块化路由"></a>4.3 模块化路由</h3><p>为了方便对路由进行模块化的管理，Express不建议将路由直接挂载到app上，而是推荐将路由抽离为单独的模块。</p>
<h4 id="将路由抽离为单独模块的步骤如下："><a href="#将路由抽离为单独模块的步骤如下：" class="headerlink" title="将路由抽离为单独模块的步骤如下："></a>将路由抽离为单独模块的步骤如下：</h4><ol>
<li>创建路由模块对应的.js文件</li>
<li>调用express.Router()函数创建路由对象</li>
<li>向路由对象上挂载具体的路由</li>
<li>使用module.exports向外共享路由对象</li>
<li>使用app.use()函数注册路由模块</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// router.js文件</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/user/list&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Get user list.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/user/add&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Add new user&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 express.static() 方法，快速的对外提供静态资源</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;./03.router&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.use()函数的作用，就是来注册全局中间件</span></span><br><span class="line"><span class="comment">// &#x27;/api&#x27;是访问前缀</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>, router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;express server running at http://127.0.0.1:8080&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="4-4-为路由模块添加前缀"><a href="#4-4-为路由模块添加前缀" class="headerlink" title="4.4 为路由模块添加前缀"></a>4.4 为路由模块添加前缀</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router/user.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用 app.use() 注册路由模块，并添加统一的访问前缀 /api</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>,userRouter)</span><br></pre></td></tr></table></figure>

<h2 id="5-中间件"><a href="#5-中间件" class="headerlink" title="5 中间件"></a>5 中间件</h2><h3 id="5-1-中间件概念"><a href="#5-1-中间件概念" class="headerlink" title="5.1 中间件概念"></a>5.1 中间件概念</h3><h4 id="什么是中间件"><a href="#什么是中间件" class="headerlink" title="什么是中间件"></a>什么是中间件</h4><p>中间件就是一堆方法，<br>可以接收客户端发来的请求<br>可以对请求做出响应<br>也可以将请求继续交给下一个中间件继续处理。<br><img src="/./img/nodejs%E7%9A%84express%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-1.png" alt="alt text"><br>中间件主要由两部分构成，<strong>中间件方法</strong>以及<strong>请求处理函数</strong>。<br>中间件方法由Express提供，负责拦截请求，请求处理函数由开发人员提供，负责处理请求。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求路径&#x27;</span>,<span class="string">&#x27;处理函数&#x27;</span>) <span class="comment">// 接收并处理get请求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;请求路径&#x27;</span>,<span class="string">&#x27;处理函数&#x27;</span>) <span class="comment">// 接收并处理post请求</span></span><br></pre></td></tr></table></figure>

<h4 id="中间件格式"><a href="#中间件格式" class="headerlink" title="中间件格式"></a>中间件格式</h4><p><img src="/./img/nodejs%E7%9A%84express%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-2.png" alt="alt text"></p>
<p>可以针对同一个请求设置多个中间件，对同一个请求进行多次处理<br>原文链接：<a href="https://blog.csdn.net/weixin_46370867/article/details/112155745">https://blog.csdn.net/weixin_46370867/article/details/112155745</a></p>
<h3 id="5-2-最简单的中间件函数"><a href="#5-2-最简单的中间件函数" class="headerlink" title="5.2 最简单的中间件函数"></a>5.2 最简单的中间件函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常量 mw 所指向的，就是一个中间件函数</span></span><br><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个最简单的中间件函数&#x27;</span>)</span><br><span class="line">    <span class="comment">// 注意：在当前中间件的业务处理完毕后，必须调用next()函数</span></span><br><span class="line">    <span class="comment">// 表示把流转关系转交给下一个中间件或路由</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-3-全局生效的中间件"><a href="#5-3-全局生效的中间件" class="headerlink" title="5.3 全局生效的中间件"></a>5.3 全局生效的中间件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常量 mw 所指向的，就是一个中间件函数</span></span><br><span class="line"><span class="keyword">const</span> mw = <span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个最简单的中间件函数&#x27;</span>)</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局生效的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(mw)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="5-4-中间件的作用"><a href="#5-4-中间件的作用" class="headerlink" title="5.4 中间件的作用"></a>5.4 中间件的作用</h3><p>多个中间件之间，共享同一份 req 和 res,基于这样的特性，我们可以在上游的中间件中，<strong>统一</strong>为 req 或 res 对象添加自定义的属性或方法，供下游的中间件或路由使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 简化全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取到请求到达服务器的时间</span></span><br><span class="line">    <span class="keyword">const</span> time = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">    <span class="comment">// 为 req 对象，挂载自定义熟悉，从而把时间共享到后面的所有路由</span></span><br><span class="line">    req.<span class="property">startTime</span> = time</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;Home page.&#x27;</span> + req.<span class="property">startTime</span>)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span> + req.<span class="property">startTime</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="5-5-定义多个全局中间件按顺序执行"><a href="#5-5-定义多个全局中间件按顺序执行" class="headerlink" title="5.5 定义多个全局中间件按顺序执行"></a>5.5 定义多个全局中间件按顺序执行</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一个&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个全局中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第二个&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;User page.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;http://127.0.0.1:8080&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>nodejs</category>
        <category>express</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>express</tag>
      </tags>
  </entry>
</search>
